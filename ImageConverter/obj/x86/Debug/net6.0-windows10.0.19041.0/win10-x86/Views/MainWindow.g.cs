#pragma checksum "D:\dotnet\repos\ImageConverter\ImageConverter\Views\MainWindow.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "F65CEE7F46C358F2205C365C77CD56835DC9B164FCC5B9BB90E8952071322525"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageConverter
{
    partial class MainWindow : 
        global::Microsoft.UI.Xaml.Window, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_NavigationView_Header(global::Microsoft.UI.Xaml.Controls.NavigationView obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Header = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_NavigationView_IsBackEnabled(global::Microsoft.UI.Xaml.Controls.NavigationView obj, global::System.Boolean value)
            {
                obj.IsBackEnabled = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_NavigationView_SelectedItem(global::Microsoft.UI.Xaml.Controls.NavigationView obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_UI_Xaml_AdaptiveTrigger_MinWindowWidth(global::Microsoft.UI.Xaml.AdaptiveTrigger obj, global::System.Double value)
            {
                obj.MinWindowWidth = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainWindow_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainWindow_Bindings
        {
            private global::ImageConverter.MainWindow dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.NavigationView obj3;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj4;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj5;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj9;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj10;
            private global::Microsoft.UI.Xaml.AdaptiveTrigger obj11;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3HeaderDisabled = false;
            private static bool isobj3IsBackEnabledDisabled = false;
            private static bool isobj3SelectedItemDisabled = false;
            private static bool isobj4CommandDisabled = false;
            private static bool isobj5CommandDisabled = false;
            private static bool isobj9CommandDisabled = false;
            private static bool isobj10CommandDisabled = false;
            private static bool isobj11MinWindowWidthDisabled = false;

            private MainWindow_obj1_BindingsTracking bindingsTracking;

            public MainWindow_obj1_Bindings()
            {
                this.bindingsTracking = new MainWindow_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 16 && columnNumber == 25)
                {
                    isobj3HeaderDisabled = true;
                }
                else if (lineNumber == 17 && columnNumber == 25)
                {
                    isobj3IsBackEnabledDisabled = true;
                }
                else if (lineNumber == 18 && columnNumber == 25)
                {
                    isobj3SelectedItemDisabled = true;
                }
                else if (lineNumber == 25 && columnNumber == 44)
                {
                    isobj4CommandDisabled = true;
                }
                else if (lineNumber == 22 && columnNumber == 44)
                {
                    isobj5CommandDisabled = true;
                }
                else if (lineNumber == 64 && columnNumber == 52)
                {
                    isobj9CommandDisabled = true;
                }
                else if (lineNumber == 61 && columnNumber == 52)
                {
                    isobj10CommandDisabled = true;
                }
                else if (lineNumber == 75 && columnNumber == 42)
                {
                    isobj11MinWindowWidthDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\MainWindow.xaml line 14
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NavigationView>(target);
                        break;
                    case 4: // Views\MainWindow.xaml line 25
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction>(target);
                        break;
                    case 5: // Views\MainWindow.xaml line 22
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction>(target);
                        break;
                    case 9: // Views\MainWindow.xaml line 64
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction>(target);
                        break;
                    case 10: // Views\MainWindow.xaml line 61
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction>(target);
                        break;
                    case 11: // Views\MainWindow.xaml line 75
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.AdaptiveTrigger>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::ImageConverter.MainWindow>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ImageConverter.MainWindow obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_NavViewCompactModeThresholdWidth(obj.NavViewCompactModeThresholdWidth, phase);
                    }
                }
            }
            private void Update_ViewModel(global::ImageConverter.ViewModels.MainViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NavigationHeader(obj.NavigationHeader, phase);
                        this.Update_ViewModel_BackButtonEnabled(obj.BackButtonEnabled, phase);
                        this.Update_ViewModel_SelectedNavigationItem(obj.SelectedNavigationItem, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_BackRequestedCommand(obj.BackRequestedCommand, phase);
                        this.Update_ViewModel_ItemInvokedCommand(obj.ItemInvokedCommand, phase);
                        this.Update_ViewModel_NavigatedCommand(obj.NavigatedCommand, phase);
                        this.Update_ViewModel_NavigationFailedCommand(obj.NavigationFailedCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_NavigationHeader(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainWindow.xaml line 14
                    if (!isobj3HeaderDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NavigationView_Header(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_BackButtonEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainWindow.xaml line 14
                    if (!isobj3IsBackEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NavigationView_IsBackEnabled(this.obj3, obj);
                    }
                }
            }
            private void Update_ViewModel_SelectedNavigationItem(global::Microsoft.UI.Xaml.Controls.NavigationViewItem obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainWindow.xaml line 14
                    if (!isobj3SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NavigationView_SelectedItem(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_BackRequestedCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MainWindow.xaml line 25
                    if (!isobj4CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj4, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ItemInvokedCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand<global::Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MainWindow.xaml line 22
                    if (!isobj5CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj5, obj, null);
                    }
                }
            }
            private void Update_ViewModel_NavigatedCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand<global::Microsoft.UI.Xaml.Navigation.NavigationEventArgs> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MainWindow.xaml line 64
                    if (!isobj9CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj9, obj, null);
                    }
                }
            }
            private void Update_ViewModel_NavigationFailedCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand<global::Microsoft.UI.Xaml.Navigation.NavigationFailedEventArgs> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MainWindow.xaml line 61
                    if (!isobj10CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj10, obj, null);
                    }
                }
            }
            private void Update_NavViewCompactModeThresholdWidth(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MainWindow.xaml line 75
                    if (!isobj11MinWindowWidthDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_AdaptiveTrigger_MinWindowWidth(this.obj11, obj);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainWindow_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainWindow_obj1_Bindings> weakRefToBindingObj; 

                public MainWindow_obj1_BindingsTracking(MainWindow_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainWindow_obj1_Bindings>(obj);
                }

                public MainWindow_obj1_Bindings TryGetBindingObject()
                {
                    MainWindow_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::ImageConverter.ViewModels.MainViewModel obj = sender as global::ImageConverter.ViewModels.MainViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_NavigationHeader(obj.NavigationHeader, DATA_CHANGED);
                                bindings.Update_ViewModel_BackButtonEnabled(obj.BackButtonEnabled, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedNavigationItem(obj.SelectedNavigationItem, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "NavigationHeader":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NavigationHeader(obj.NavigationHeader, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BackButtonEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_BackButtonEnabled(obj.BackButtonEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedNavigationItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedNavigationItem(obj.SelectedNavigationItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::ImageConverter.ViewModels.MainViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::ImageConverter.ViewModels.MainViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\MainWindow.xaml line 13
                {
                    this.RootGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 3: // Views\MainWindow.xaml line 14
                {
                    this.NavView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NavigationView>(target);
                }
                break;
            case 6: // Views\MainWindow.xaml line 35
                {
                    this.ImageConvertHeader = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NavigationViewItemHeader>(target);
                }
                break;
            case 7: // Views\MainWindow.xaml line 52
                {
                    this.NavViewSearchBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.AutoSuggestBox>(target);
                }
                break;
            case 8: // Views\MainWindow.xaml line 57
                {
                    this.ContentFrame = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Frame>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2309")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\MainWindow.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Window element1 = (global::Microsoft.UI.Xaml.Window)target;
                    MainWindow_obj1_Bindings bindings = new MainWindow_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Activated += bindings.Activated;
                }
                break;
            }
            return returnValue;
        }
    }
}

